# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs: 
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14' # Specify the Node.js version

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - name: Restore dependencies
        run: dotnet restore ./pkatu-pipeline-assignment.sln

      - name: Change directory and Run Snyk to check for vulnerabilities
        run: |
          cd ./pkatu-pipeline-assignment
          snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  build_and_deploy_docker:

    runs-on: ubuntu-latest

    steps:
    - name: Get Selenium Server Logs
      run: docker logs selenium-server
    - name: Create Docker network
      run: docker network create selenium-network
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - uses: actions/checkout@v3 
    - name: Print current directory
      run: pwd
    - name: Build the Docker image    
      run: docker build -t pkatu-pipeline-assignment:mytag ./pkatu-pipeline-assignment
    - name: Run the Docker image (Application)
      run: docker run -d --net selenium-network -p 8080:80 --name myapp pkatu-pipeline-assignment:mytag
    
    - name: Run Selenium Server
      run: docker run -d --net selenium-network --name selenium-server selenium/standalone-chrome:latest

  selenium_tests:
    needs: build_and_deploy_docker
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Selenium Side Runner
      run: npm install -g selenium-side-runner

    - name: Setup ChromeDriver
      run: |
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
        echo "Using ChromeDriver version: $CHROMEDRIVER_VERSION"
        wget "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver



    - name: Check Selenium Server availability
      run: |
        until curl -s http://selenium-server:4444/wd/hub/status | grep -q '"ready":true'; do
        echo "Waiting for Selenium server..."
        sleep 5
        done
        echo "Selenium server is up and running."

    - name: Run Selenium Tests
      run: selenium-side-runner --server http://selenium-server:4444/wd/hub --capabilities browserName=chrome,goog:chromeOptions.args=[--headless,--disable-gpu,--window-size=1920x1080] ./pkatu-pipeline-assignment/pkatu-pipeline-assignment.side
